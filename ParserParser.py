# Generated from Parser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\25")
        buf.write("{\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b")
        buf.write("\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t")
        buf.write("\16\4\17\t\17\3\2\3\2\3\2\3\2\7\2#\n\2\f\2\16\2&\13\2")
        buf.write("\3\2\3\2\3\3\3\3\3\3\5\3-\n\3\3\4\3\4\3\4\3\4\3\4\5\4")
        buf.write("\64\n\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\7\n")
        buf.write("N\n\n\f\n\16\nQ\13\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\f\3\f\3\f\7\f^\n\f\f\f\16\fa\13\f\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\5\17n\n\17\3")
        buf.write("\17\3\17\3\17\3\17\7\17t\n\17\f\17\16\17w\13\17\5\17y")
        buf.write("\n\17\3\17\3_\2\20\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\2\2\2z\2\36\3\2\2\2\4,\3\2\2\2\6\63\3\2\2\2\b\65\3\2")
        buf.write("\2\2\n9\3\2\2\2\f=\3\2\2\2\16A\3\2\2\2\20E\3\2\2\2\22")
        buf.write("I\3\2\2\2\24T\3\2\2\2\26_\3\2\2\2\30b\3\2\2\2\32e\3\2")
        buf.write("\2\2\34x\3\2\2\2\36\37\7\3\2\2\37$\5\4\3\2 !\7\4\2\2!")
        buf.write("#\5\4\3\2\" \3\2\2\2#&\3\2\2\2$\"\3\2\2\2$%\3\2\2\2%\'")
        buf.write("\3\2\2\2&$\3\2\2\2\'(\7\5\2\2(\3\3\2\2\2)-\5\2\2\2*-\5")
        buf.write("\6\4\2+-\5\20\t\2,)\3\2\2\2,*\3\2\2\2,+\3\2\2\2-\5\3\2")
        buf.write("\2\2.\64\7\21\2\2/\64\5\b\5\2\60\64\5\n\6\2\61\64\5\f")
        buf.write("\7\2\62\64\5\16\b\2\63.\3\2\2\2\63/\3\2\2\2\63\60\3\2")
        buf.write("\2\2\63\61\3\2\2\2\63\62\3\2\2\2\64\7\3\2\2\2\65\66\7")
        buf.write("\21\2\2\66\67\7\6\2\2\678\5\6\4\28\t\3\2\2\29:\7\21\2")
        buf.write("\2:;\7\7\2\2;<\5\6\4\2<\13\3\2\2\2=>\7\21\2\2>?\7\b\2")
        buf.write("\2?@\5\6\4\2@\r\3\2\2\2AB\7\21\2\2BC\7\7\2\2CD\5\6\4\2")
        buf.write("D\17\3\2\2\2EF\7\t\2\2FG\7\20\2\2GH\7\t\2\2H\21\3\2\2")
        buf.write("\2IJ\7\23\2\2JO\5\20\t\2KL\7\4\2\2LN\5\20\t\2MK\3\2\2")
        buf.write("\2NQ\3\2\2\2OM\3\2\2\2OP\3\2\2\2PR\3\2\2\2QO\3\2\2\2R")
        buf.write("S\7\n\2\2S\23\3\2\2\2TU\7\13\2\2UV\7\25\2\2VW\7\3\2\2")
        buf.write("WX\5\26\f\2XY\7\f\2\2Y\25\3\2\2\2Z^\5\22\n\2[^\5\30\r")
        buf.write("\2\\^\5\32\16\2]Z\3\2\2\2][\3\2\2\2]\\\3\2\2\2^a\3\2\2")
        buf.write("\2_`\3\2\2\2_]\3\2\2\2`\27\3\2\2\2a_\3\2\2\2bc\7\24\2")
        buf.write("\2cd\7\r\2\2d\31\3\2\2\2ef\7\23\2\2fg\5\20\t\2gh\7\16")
        buf.write("\2\2hi\5\34\17\2ij\7\17\2\2j\33\3\2\2\2kl\7\23\2\2ln\5")
        buf.write("\20\t\2mk\3\2\2\2mn\3\2\2\2ny\3\2\2\2op\7\23\2\2pu\5\20")
        buf.write("\t\2qr\7\4\2\2rt\7\23\2\2sq\3\2\2\2tw\3\2\2\2us\3\2\2")
        buf.write("\2uv\3\2\2\2vy\3\2\2\2wu\3\2\2\2xm\3\2\2\2xo\3\2\2\2y")
        buf.write("\35\3\2\2\2\13$,\63O]_mux")
        return buf.getvalue()


class ParserParser ( Parser ):

    grammarFileName = "Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "','", "'}'", "'+'", "'/'", "'*'", 
                     "'\"'", "';'", "'class '", "'};'", "':'", "'('", "');'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CHAR", "INT", "WS", "PRIMITIVE_TYPE", 
                      "VISIBILITY", "ID" ]

    RULE_vector = 0
    RULE_primitive = 1
    RULE_expression = 2
    RULE_sum_ = 3
    RULE_difference = 4
    RULE_multiplication = 5
    RULE_division = 6
    RULE_string = 7
    RULE_variable = 8
    RULE_pyClass = 9
    RULE_class_body = 10
    RULE_class_access = 11
    RULE_class_method = 12
    RULE_function_args = 13

    ruleNames =  [ "vector", "primitive", "expression", "sum_", "difference", 
                   "multiplication", "division", "string", "variable", "pyClass", 
                   "class_body", "class_access", "class_method", "function_args" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    CHAR=14
    INT=15
    WS=16
    PRIMITIVE_TYPE=17
    VISIBILITY=18
    ID=19

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class VectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParserParser.PrimitiveContext)
            else:
                return self.getTypedRuleContext(ParserParser.PrimitiveContext,i)


        def getRuleIndex(self):
            return ParserParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)




    def vector(self):

        localctx = ParserParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 28
            self.match(ParserParser.T__0)
            self.state = 29
            self.primitive()
            self.state = 34
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParserParser.T__1:
                self.state = 30
                self.match(ParserParser.T__1)
                self.state = 31
                self.primitive()
                self.state = 36
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 37
            self.match(ParserParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector(self):
            return self.getTypedRuleContext(ParserParser.VectorContext,0)


        def expression(self):
            return self.getTypedRuleContext(ParserParser.ExpressionContext,0)


        def string(self):
            return self.getTypedRuleContext(ParserParser.StringContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_primitive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive" ):
                listener.enterPrimitive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive" ):
                listener.exitPrimitive(self)




    def primitive(self):

        localctx = ParserParser.PrimitiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primitive)
        try:
            self.state = 42
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ParserParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 39
                self.vector()
                pass
            elif token in [ParserParser.INT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 40
                self.expression()
                pass
            elif token in [ParserParser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 41
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ParserParser.INT, 0)

        def sum_(self):
            return self.getTypedRuleContext(ParserParser.Sum_Context,0)


        def difference(self):
            return self.getTypedRuleContext(ParserParser.DifferenceContext,0)


        def multiplication(self):
            return self.getTypedRuleContext(ParserParser.MultiplicationContext,0)


        def division(self):
            return self.getTypedRuleContext(ParserParser.DivisionContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ParserParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.state = 49
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 44
                self.match(ParserParser.INT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 45
                self.sum_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 46
                self.difference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 47
                self.multiplication()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 48
                self.division()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sum_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ParserParser.INT, 0)

        def expression(self):
            return self.getTypedRuleContext(ParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_sum_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_" ):
                listener.enterSum_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_" ):
                listener.exitSum_(self)




    def sum_(self):

        localctx = ParserParser.Sum_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sum_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 51
            self.match(ParserParser.INT)
            self.state = 52
            self.match(ParserParser.T__3)
            self.state = 53
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DifferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ParserParser.INT, 0)

        def expression(self):
            return self.getTypedRuleContext(ParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_difference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifference" ):
                listener.enterDifference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifference" ):
                listener.exitDifference(self)




    def difference(self):

        localctx = ParserParser.DifferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_difference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 55
            self.match(ParserParser.INT)
            self.state = 56
            self.match(ParserParser.T__4)
            self.state = 57
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ParserParser.INT, 0)

        def expression(self):
            return self.getTypedRuleContext(ParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_multiplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplication" ):
                listener.enterMultiplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplication" ):
                listener.exitMultiplication(self)




    def multiplication(self):

        localctx = ParserParser.MultiplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_multiplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 59
            self.match(ParserParser.INT)
            self.state = 60
            self.match(ParserParser.T__5)
            self.state = 61
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ParserParser.INT, 0)

        def expression(self):
            return self.getTypedRuleContext(ParserParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_division

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDivision" ):
                listener.enterDivision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDivision" ):
                listener.exitDivision(self)




    def division(self):

        localctx = ParserParser.DivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_division)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 63
            self.match(ParserParser.INT)
            self.state = 64
            self.match(ParserParser.T__4)
            self.state = 65
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR(self):
            return self.getToken(ParserParser.CHAR, 0)

        def getRuleIndex(self):
            return ParserParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = ParserParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 67
            self.match(ParserParser.T__6)
            self.state = 68
            self.match(ParserParser.CHAR)
            self.state = 69
            self.match(ParserParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(ParserParser.PRIMITIVE_TYPE, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParserParser.StringContext)
            else:
                return self.getTypedRuleContext(ParserParser.StringContext,i)


        def getRuleIndex(self):
            return ParserParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)




    def variable(self):

        localctx = ParserParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 71
            self.match(ParserParser.PRIMITIVE_TYPE)
            self.state = 72
            self.string()
            self.state = 77
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ParserParser.T__1:
                self.state = 73
                self.match(ParserParser.T__1)
                self.state = 74
                self.string()
                self.state = 79
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 80
            self.match(ParserParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PyClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ParserParser.ID, 0)

        def class_body(self):
            return self.getTypedRuleContext(ParserParser.Class_bodyContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_pyClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPyClass" ):
                listener.enterPyClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPyClass" ):
                listener.exitPyClass(self)




    def pyClass(self):

        localctx = ParserParser.PyClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pyClass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 82
            self.match(ParserParser.T__8)
            self.state = 83
            self.match(ParserParser.ID)
            self.state = 84
            self.match(ParserParser.T__0)
            self.state = 85
            self.class_body()
            self.state = 86
            self.match(ParserParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParserParser.VariableContext)
            else:
                return self.getTypedRuleContext(ParserParser.VariableContext,i)


        def class_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParserParser.Class_accessContext)
            else:
                return self.getTypedRuleContext(ParserParser.Class_accessContext,i)


        def class_method(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ParserParser.Class_methodContext)
            else:
                return self.getTypedRuleContext(ParserParser.Class_methodContext,i)


        def getRuleIndex(self):
            return ParserParser.RULE_class_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_body" ):
                listener.enterClass_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_body" ):
                listener.exitClass_body(self)




    def class_body(self):

        localctx = ParserParser.Class_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_class_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 91
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                    if la_ == 1:
                        self.state = 88
                        self.variable()
                        pass

                    elif la_ == 2:
                        self.state = 89
                        self.class_access()
                        pass

                    elif la_ == 3:
                        self.state = 90
                        self.class_method()
                        pass

             
                self.state = 95
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VISIBILITY(self):
            return self.getToken(ParserParser.VISIBILITY, 0)

        def getRuleIndex(self):
            return ParserParser.RULE_class_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_access" ):
                listener.enterClass_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_access" ):
                listener.exitClass_access(self)




    def class_access(self):

        localctx = ParserParser.Class_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_class_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 96
            self.match(ParserParser.VISIBILITY)
            self.state = 97
            self.match(ParserParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_methodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self):
            return self.getToken(ParserParser.PRIMITIVE_TYPE, 0)

        def string(self):
            return self.getTypedRuleContext(ParserParser.StringContext,0)


        def function_args(self):
            return self.getTypedRuleContext(ParserParser.Function_argsContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_class_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_method" ):
                listener.enterClass_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_method" ):
                listener.exitClass_method(self)




    def class_method(self):

        localctx = ParserParser.Class_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_class_method)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self.match(ParserParser.PRIMITIVE_TYPE)
            self.state = 100
            self.string()
            self.state = 101
            self.match(ParserParser.T__11)
            self.state = 102
            self.function_args()
            self.state = 103
            self.match(ParserParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMITIVE_TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(ParserParser.PRIMITIVE_TYPE)
            else:
                return self.getToken(ParserParser.PRIMITIVE_TYPE, i)

        def string(self):
            return self.getTypedRuleContext(ParserParser.StringContext,0)


        def getRuleIndex(self):
            return ParserParser.RULE_function_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_args" ):
                listener.enterFunction_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_args" ):
                listener.exitFunction_args(self)




    def function_args(self):

        localctx = ParserParser.Function_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ParserParser.PRIMITIVE_TYPE:
                    self.state = 105
                    self.match(ParserParser.PRIMITIVE_TYPE)
                    self.state = 106
                    self.string()


                pass

            elif la_ == 2:
                self.state = 109
                self.match(ParserParser.PRIMITIVE_TYPE)
                self.state = 110
                self.string()
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ParserParser.T__1:
                    self.state = 111
                    self.match(ParserParser.T__1)
                    self.state = 112
                    self.match(ParserParser.PRIMITIVE_TYPE)
                    self.state = 117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





